package com.jcat.cloud.fw.fwservices.monitoring;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.jcat.cloud.fw.fwservices.monitoring.common.ZabbixProperties;
import com.jcat.cloud.fw.fwservices.monitoring.db.MonitoringSample;
import com.jcat.cloud.fw.fwservices.monitoring.util.HttpHelper;

/**
 *
 * This class wraps the Zabbix RESTful API.
 *
 * After instantiating this class, you need to call the authenticate method
 * with an address to the Zabbix host (node/DC), Zabbix username and password
 * before using any of the Zabbix services.
 *
 * After a successful authentication, you can get
 *      1. The Zabbix API
 *      2. A list of available hosts
 *      3. A list of samples, given a host, sample item, and a time interval
 *
 * Possible database optimization in the future would be to skip the entries
 * that have the value of 0.
 *
 * <p>
 * <b>Copyright:</b> Copyright (c) 2015
 * </p>
 * <p>
 * <b>Company:</b> Ericsson
 * </p>
 *
 * @author ehkiyki 2015-06-26 Initial version
 *
 */
public class ZabbixWrapper {

    // Maximum number of samples per query
    private final int MAX_SAMPLES_PER_QUERY = 2000;

    // Session token that is generated by Zabbix in order to request the monitoring statistics
    private String mAuthToken = "";

    // URL to the Zabbix API
    private String mUrlStr = "";

    // Content type of the requests to the Zabbix API
    private String mContentType = "";

    // Handles JSON serialization and deserialization.
    private Gson mGson;

    // JSON parser to parse String to JsonObject
    private JsonParser mJsonParse;

    // Maps host names to Zabbix internal IDs
    private Map<String, Integer> mHostToId;

    // Used for sending POST requests
    private HttpHelper mHttpHelper;

    /**
     * Default constructor
     */
    public ZabbixWrapper() {
        mGson = new Gson();
        mJsonParse = new JsonParser();
        mHostToId = null;
        mHttpHelper = new HttpHelper();
    }

    /**
     * Creates a basic Zabbix API request template, adds the given parameters,
     * sends the request and returns the response.
     * @param method The name of the Zabbix API method, e.g. "item.get".
     * @param params The parameters that should be passed along with the method.
     * @return The response from Zabbix.
     */
    private JsonElement getFromZabbix(String method, JsonObject params) {
        JsonObject request = new JsonObject();
        request.addProperty("jsonrpc", "2.0");
        request.addProperty("method", method);
        request.addProperty("auth", mAuthToken);
        request.addProperty("id", 1);
        // Add the given parameters to the request
        if (params != null) {
            request.add("params", params);
        }
        // Send the POST request
        String requestStr = mGson.toJson(request);
        String responseStr = mHttpHelper.post(mUrlStr, requestStr, mContentType);
        JsonObject response = (JsonObject) mJsonParse.parse(responseStr);
        JsonElement result = response.get("result");
        return result;
    }

    /**
     * Returns the Zabbix Id of the host.
     * @param hostName The name of the host
     * @return The Zabbix Id of the host if it is found, -1 otherwise
     */
    private int getHostId(String hostName) {
        if (mHostToId == null) {
            mHostToId = getHostToIdMapping();
        }
        if (mHostToId.containsKey(hostName)) {
            return mHostToId.get(hostName);
        } else {
            return -1;
        }
    }

    /**
     * @return A map that maps host names to Zabbix Ids.
     */
    private Map<String, Integer> getHostToIdMapping() {
        JsonObject params = new JsonObject();
        params.addProperty("output", "extend");
        JsonArray hosts = (JsonArray) getFromZabbix("host.get", params);
        Map<String, Integer> hostToId = new HashMap<String, Integer>();

        for (JsonElement host : hosts) {
            if (host.isJsonObject()) {
                JsonObject hostObj = (JsonObject) host;
                String hostName = hostObj.get("host").getAsString();
                int hostId = hostObj.get("hostid").getAsInt();
                hostToId.put(hostName, hostId);
            }
        }
        return hostToId;
    }

    /**
     * Returns the Zabbix Id of the item.
     * @param itemName The name of the item
     * @return The Zabbix Id of the item if it is found, -1 otherwise
     */
    private int getItemId(int hostId, String itemName) {
        JsonObject params = new JsonObject();
        params.addProperty("output", "extend");
        params.addProperty("hostids", hostId);
        JsonObject search = new JsonObject();
        search.addProperty("name", itemName);
        params.add("search", search);
        JsonArray hosts = (JsonArray) getFromZabbix("item.get", params);

        for (JsonElement host : hosts) {
            if (host.isJsonObject()) {
                JsonObject hostObj = (JsonObject) host;
                return hostObj.get("itemid").getAsInt();
            }
        }
        return -1;
    }

    /**
     * Returns all available items for the given host Id.
     * @param hostId The host Id
     * @return A map that maps the item Ids to the ZabbixItem(s) available for this host
     */
    private Map<Integer, ZabbixItem> getItems(int hostId) {
        JsonObject params = new JsonObject();
        params.addProperty("output", "extend");
        params.addProperty("hostids", hostId);
        JsonArray hosts = (JsonArray) getFromZabbix("item.get", params);
        Map<Integer, ZabbixItem> items = new HashMap<Integer, ZabbixItem>();

        for (JsonElement host : hosts) {
            if (host.isJsonObject()) {
                JsonObject hostObj = (JsonObject) host;
                String itemName = hostObj.get("name").getAsString();
                int itemId = hostObj.get("itemid").getAsInt();
                int typeId = hostObj.get("type").getAsInt();
                ZabbixItem item = new ZabbixItem();
                item.setName(itemName);
                item.setTypeId(typeId);
                items.put(itemId, item);
            }
        }
        return items;
    }

    /**
     * Authenticates with the Zabbix server and obtains a session token
     * that is used for the other requests. This methods need to be
     * called before any other Zabbix service related request.
     * @param properties The Zabbix API session properties
     * @return This object
     * @throws Exception Thrown when the authentication fails to the Zabbix server
     */
    public ZabbixWrapper authenticate(ZabbixProperties properties) {
        mUrlStr = properties.getUrl();
        mContentType = properties.getContentType();
        JsonObject params = new JsonObject();
        params.addProperty("user", properties.getUsername());
        params.addProperty("password", properties.getPassword());
        mAuthToken = getFromZabbix("user.login", params).getAsString();
        return this;
    }

    /**
     * Returns a list of available host names.
     * @return A list of all available host names.
     */
    public List<String> getHostNames() {
        List<String> hostNames = new ArrayList<String>();
        JsonObject params = new JsonObject();
        params.addProperty("output", "extend");
        JsonArray hosts = (JsonArray) getFromZabbix("host.get", params);
        for (JsonElement host : hosts) {
            if (host.isJsonObject()) {
                JsonObject hostObj = (JsonObject) host;
                String hostName = hostObj.get("host").getAsString();
                hostNames.add(hostName);
            }
        }
        return hostNames;
    }

    /**
     * Returns a list of available items for the given host.
     * @return A list of all available items, null if the host is not found.
     */
    public List<String> getItemNames(String hostName) {
        int hostId = getHostId(hostName);
        if (hostId == -1) {
            return null;
        }
        List<String> itemNames = new ArrayList<String>();
        JsonObject params = new JsonObject();
        params.addProperty("output", "extend");
        params.addProperty("hostids", hostId);
        JsonArray items = (JsonArray) getFromZabbix("item.get", params);
        for (JsonElement item : items) {
            if (item.isJsonObject()) {
                JsonObject itemObj = (JsonObject) item;
                String itemName = itemObj.get("name").getAsString();
                itemNames.add(itemName);
            }
        }
        return itemNames;
    }

    /**
     * Returns a list of monitoring samples for the given items for the
     * given host. However, some items are not always included in the
     * Zabbix service response. If that is the case, use the other
     * getSamples() method that requires the item name as an argument.
     * @param nodeName The name or the IP of the node
     * @param hostName The name of the host
     * @param item The item to sample
     * @param from Get samples from this date and time
     * @param to Get samples up to this date
     * @return A list of samples, null of the host is not found
     */
    public List<MonitoringSample> getSamples(String nodeName, String hostName, ZabbixItem item, Date from, Date to) {
        List<MonitoringSample> samples = new ArrayList<MonitoringSample>();
        Map<Integer, ZabbixItem> items = null;
        // Make sure that the host is valid
        int hostId = getHostId(hostName);
        if (hostId == -1) {
            // Could not find the host
            return null;
        }

        JsonObject params = new JsonObject();
        params.addProperty("output", "extend");
        params.addProperty("hostids", hostId);
        if (item != null) {
            int itemId = getItemId(hostId, item.getName());
            if (itemId == -1) {
                // Could not find the item
                return null;
            }
            params.addProperty("history", item.getTypeId());
            params.addProperty("itemids", itemId);
        } else {
            items = getItems(hostId);
        }

        params.addProperty("time_from", from.getTime() / 1000); // Convert from ms to s
        params.addProperty("time_to", to.getTime() / 1000); // Convert from ms to s
        params.addProperty("limit", MAX_SAMPLES_PER_QUERY);
        JsonArray history = (JsonArray) getFromZabbix("history.get", params);

        if (history.size() >= MAX_SAMPLES_PER_QUERY) {
            System.out
                    .println("[WARNING] Query result exceeded the maximum sample size. This may have caused losses in retrieved data");
        }

        for (JsonElement historyEntry : history) {
            if (historyEntry.isJsonObject()) {
                JsonObject historyEntryObj = (JsonObject) historyEntry;
                long unixTimestampSec = historyEntryObj.get("clock").getAsLong();
                Timestamp sampleTimestamp = new Timestamp(unixTimestampSec * 1000);
                float value = historyEntryObj.get("value").getAsFloat();
                MonitoringSample sample = new MonitoringSample();
                sample.setNode(nodeName);
                sample.setHost(hostName);
                if (item != null) {
                    sample.setData(item.getName());
                } else {
                    int typeId = historyEntryObj.get("itemid").getAsInt();
                    sample.setData(items.get(typeId).getName());
                }
                sample.setValue(value);
                sample.setTimestamp(sampleTimestamp);
                samples.add(sample);
            }
        }

        return samples;
    }
}
